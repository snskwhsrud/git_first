pythonanywhere 배포

1) 회원가입
2) 프로젝트를 전체 압축하여 files에 업로드 (home/YOUR_ID)
3) Bash 접속
4) ls 키워드를 사용하여 README 파일과 압축 파일 2개가 존재하는지 확인하기
5) unzip {압축파일}을 사용하여 압축풀기
6)virtualenv --python=python3.10 {가상환경이름} 으로 가상환경 생성 
7) source {가상환경이름} bin/activate으로 가상환경 활성화
8) pip install django 를 통해 장고 패키지 설치
9) pip install 필요한 패키지 설치
10) exit 키워드로 배쉬 종료
11) setting.py 수정하기
DEBUG = False 
ALLOWED_HOSTS = ['YOUR_ID.pythoonanywhere.com' ]

STATIC_ROOT = os.path.hoin(BASE_DIR, 'static')

12) 배쉬로 다시 돌아가서 가상환경에서 python manage.py collectstatic으로  static 파일을 모아주기

13) web으로 들어가서 Add a new web app 
14) Manual configuration 선택 -> python 최신 버전
15) Code -> Source Code : /home/YOUR_ID/프로젝트명 
16) Working Driectory, WSGI 도 자신의 아이디가 제대로 들어가 있는지 확인
17) WSGI 파일 설정 -> 장고 부분만 사용 -> 자신의 아이디로 코드 변경 
18) 가상환경 설정(virtualenv) : /home/YOUR_ID/가상환경 이름 
19) static files -> URL : static/Directory : /home/YOUR_ID/프로젝트명/static

- 로그 남기기 

로그 레벨 
1) DEBUG : 시스템의 상세 정보를 로그로 남기고 싶을 떄, 프로그램이 어떻게 동작하는지에 대한 로그를 남길 수 있다(디버깅 목적 )
2) INFO : 시스탬이 정상적으로 동작하고 있음을 알리는 로그를 남기고 싶을 때 사용 
3) WARNING : 문제가 될 수 있는 잠재적 이슈를 알리고 싶을 때 사용된다
4) ERROR : 프로그램 실행 중 오류가 발생하여 작업을 수행하지 못했다는 것을 알릴 때 사용한다 일부 동작이 작동하지 않게 작업가능하다 
5) CRITICAL : 매우 심각한 문제가 발생하여 프로그램이 계속 실행되지 못할 수 있다라는 것을 알릴 때 사용한다


-파이썬 logging 모듈
1) 기본 로거 설정
import logging 

logging.basicConfig(level=logging.INFO) #로그 설정, level 파라미터를 통해 최소한으로 출력할 로그 레벨 지정 

2) 로그 메시지 남기기 
logging.debug('디버그 메시지' )
logging.info('안포 메세지' )
logging.warning('워닝 메세지)
logging.error('에러 메세지')
logging.critical('크리티컬 메세지' )

3) 로거 객체 사용하기
logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)

logger.warning('경고 메세지')

4) 핸들러(Handler)와 필터(Fliter)
핸들러 : 로그 메세지가 출력될 위치를 결정한다
StreamHandler : 로그 메세지를 스트림(콘솔, 터미널 등 )에 출력
FileHandler : 로그 메세지를 파일에 출력 
RotatingFileHandler : 파일 크기가 일정 크기에 도달하면 새로운 파일을 생성해서 계속 기록 
TimedTotatingFileHandler : 일정 시간 간격으로 새로운 파일을 계속 기록

필터 : 특정 조건을 만족하는 로그 메세지만 출력할 수 있도록 설정한다
class NewFilter(logging.Fliter):
    def filter(self, record):
        if 'error' in record.msg:
            return True

new_filter = NewFilter()
handler.addFilter(new_filter)

5) Handler와 Formatter 설정
C_handler = logging.StreamHandler()
F_handler = logging.FileHandler('file.log' )

c_handler.setLevel(logging.DEBUF)
F_handler.setLevel(logging.ERROR)


c_format = logging.Formatter('%(name)- %(levelname)- %(message)')
f_format = logging.formatter('%(asctime)- % (name) -  %(levelname) - %(message)')

c_handler.setFormatter(c_format)
F_handler.setFotmatter(f_format)

logger.addhandler(c_handler)
logger.addHandler(f_handler)

logger.debug('디버그 메세지입니다.')
logger.error ('에러 메세지입니다.')

6) 로그 포맷팅

% 스타일 
logging.basicConfig(format-'%(levelname): %(message)', level=logging.DEBUG)
logging.debug("디버그 메세지")

str.format() 스타일 (python 3.2)
logging.basicConfig(format='{levelname}: {message}', style='{' level=logging.DEBUG})
msg = "디버그 메세지"
level = "DEBUG"
logging.debug(level, f'{msg}')

설정 파일 관리 : logging.conf 또는 logging.json을 통해 로깅 설정을 분리 및 관리

INI 스타일 logging.conf
[loggers]
keys = root,sampleLOgger

[handlers]
keys = consoleHandler

[formatters]
keys = sampleFormatter

[logger_root]
level = DEBUG
handlers = consoleHandler

[logger_sampleLogger]
level = DEBUG
handlers = consoleHandler
qualname = sampleLOgger
propagate = 0

[handler_cinsoleHandler]
class=StreamHandler
level = DEBUG
formatters = sampleFormatter
args = (sys.stdout,)

[formatter_sampleFormatter]
format = %(asctime) - %(name) - %(levelname) -%(message)
datefmt = %Y/ %m/ %d %I : %M: %S %P


---------------------------------------
import logging.config

logging.config.fileConfig('logging.conf')

logger - logging.getLogger('sampleLogger')
logger.debug('디버그 메세지')

----------------------------------------

{
    "version": 1,
    "disable_existing_loggers":false,
    "root": {
        "level": "INFO",
        "handlers" : ["console"]
    },
    "handlers : {
        "console": {
            "formatter": "sample",
            "stream": "ext://sys.stdout"
        }
    },
    "formatter"{
        "sample":{
            format : "%(asctime) -%(name) - %(levelname) - %(message)"
        }
    }
}

-------------------------------------
import json
import logging.config

with open('logging.json', 'rt') as f:
    congig = json.load(f)

logging.config.dictconfig(config)
logger = logging.getLogger()
logger.info("인포 메세지")


- 로그 남기기 예시

1) setting.py 로깅 설정 추가

LOGGING = {
    'version' : 1, 
    'disable_existing_loggers' : False,
    'handlers' :{
        'console' : {
            'class' : logging.streamHandler',
        },
    },
    'root' : {
        'handlers' : ['console'],
        'level' : 'WARNING',
    },
}

2) 로그 남기기 : logging 모듈을 사용하면 django 프로젝트 어디에서든 로그를 남길 수 있다

import logging

def new_view(request):
    logger = logging.getLogger(__name__)

    try:
        #여기 부분에 코드
    except Exception as e:
        logger.error(e)

    return render(request, "index.html")

    