// 1. 동적인 웹 페이지 : HTML 요소를 선택하고 내용, 스타일, 동작 등을 동적으로 변경할 수 있다
// 사용자와 상호작용하여 다양한 이벤트에 반응하는 웹 어플리케이션 만들 수 있다.
// 2. 클라이언트 측 프로그래밍 : 클라이언트 측에서 실행되는 언어다. 사용자의 웹 브라우저에서 사용된다
// 3. 객체 지향 프로그래밍 : OOP 개념 사용하고, 객체, 메서드, 속성 등을 활용하여 작성할  수 있다
// 4. 이벤트 기반 프로그래밍 : 이벤트 기반(Event-driven) 모델을 따른다 이벤트 발생 시 해당 이벤트 대한 처리기(Event Handler) 함수를 사용
// 5. API와 상호작용: 외부 리소스와 서비스에 접근하여 사용가능하다
// 6. 다른 플랫폼에서 활용: Node.js Dart 등에서 자바스크립트를 활용하여 사용할 수 있다

// -var, let : 변수 키워드

// 1. 범위(scope): var로 선언된 변수는 함수 범위(function scope), let로 선언된 변수는 블록 범위(block scope)

// functionexam(){
//     var x = 10;
//     let y = 20;

//     if(true){
//         var x = 30; // 기존 전역변수 10을 수정
//         let y = 40; // 블록 지역변수 y를 선언

//         console.log(x); //30
//         console.log(y); // 40
//     }
//     console.log(x);
//     console.log(y);
// }

// 2. 호이스팅(HOisting) : 코드 실행 전에 변수가 선언되었다고 처리되어, 실제 변수 할당 이전에도 사용할  수 있다
// var 호이스티 발생, let 호이스팅 발생 x

// console.log(x); //Undefined
// console.log(y); // y가 없다

// var x = 10;
// let y = 20;

// console.log(x);
// console.log(y);

// 3. 재선언 (Re-declaration) : var로 동일한 변수를 여러번 선언해도 에러가 발생하지 않고 재할당된다.

// 4. 전역 객체(Global object) : 객체 단계에서 전역범위에서 생성된 var 전역변수로 해석이되고, let, const, class 등 전역변수  프로퍼티로 해석되지 않는다

// -  Array 생성
// var arr = [, , , ];
// var arr = new Array(, , ,);*
// var arr = Array(, , , );

// arr.length : 길이
// arr[i] : i인덱스 요소
// arr.pop() : 요소 제거
// arr.push(n) : 요소 추가

// - 반복문
// for, while, do-while, for-in, for-OfflineAudioCompletionEvent

// var arr = [1,2,3,4,5,6,7,8,9];

// for(let i in arr) {
//     console.log(i);
// }
// // 인덱스를 출력

// for(let i of arr){
//     console.log(i)
// }
// // 요소 하나하나 출력

// - lable문 (break, countinue)
// 코드 내에 특정 부분에 이름 짓기.
//  labelName : CSSLayerStatementRule

// for (let i=0; i<5; i++){
//     for(let j=0; j<10; j++){
//         if(j == 3) {
//             break outer;  // outer를 종료 (바깥 반복문이 종료 )
//         }
//         console.log(i+j)
//     }
// }

// -Symbol
// 원시 데이터 타입, 고유하고 변경 불가능한 데이터 값
// let a = sumbol("123");

// 1. typeof
// 2. instanceof

//-Dom( Document object Model)
//웹 페이지를 스크립트 또는 프로그래밍 언어들이 사용할 수 있는 구조로 표현하는 방법
//Dom은 트리구조의 형태로 되어 있다
//Dom은 트리구조의 형태로 되어 있다.HTML 문서의 각 요소는 DOm의 노드(node)에 해당한다

// Documet NOde: 전체 페이지를 나타낸다 트리구조 최사위 위치
// Element Node: HTML 요소를 나타낸다 (<body>,>div>,<p>)
// Text Node:  HTML 요소 내부의 문자열을 나타낸다
// Attribute Node : HTML 요소 내부의 속성을 나타낸다. (src,alt)

// ID로 요소 선택하기
//let title = document.getElementById("title");

//클래스 이름으로 요소 선택하기
//let title = document.getElementsByClassName('title')

//태그 이름으로 요소 선택하기
//let title = document.getElementsByTagName("p");

//Css 선택자로 요소 선택하기
// let highlight = document.querySelector(',highlight')
// let highlight = document.querySelectorAll('.highlight')

// //요소 내부의 텍스트 변경하기
// title.textContent = "수정한 텍스트";

// 새로운 요소를 생성하고 추가하기
// let newOne = document.createElement('p')
// newOne.textContent = "새로운 p";  //p태그를 body의 자식으로 추가한다
// document.body.appendChild(newOne); //p 태그를 body의 자식으로 추가한다

// - 이벤트
// 웹 페이지 내에서 사용자의 상호작용, 브라우저 동작 등을 감지하고, 그에 따른 동작을 수행하는 방법 
// 이벤트를 처리하는 방법 : 이벤트 리스너, 이벤트 핸들러

// 1. HTML 속성을 통한 설정 : HTML 요소의 속성으로 직접 이벤트 핸들러를 설정할 수 있다.
// <button onclick="function()">click</button>

// 2. DOM 프로퍼티를 통한 설정 :  JSP 코드 내에서 DOM요소의 프로퍼리로 이벤트 핸들러 함수를 할당할 수 있다 
// var btn = document.getElementById('btn');
// btn.onclick = function(){
//     alert("click");
// };

// 3. addEventListener 메소드 사용 : 가장 유연하게 이벤트를 처리하는 방법.
// var btn = document.getElementById("btn");
// btn.addEventListener('click', function(){
//     alert("click");
// });

// 주요 이벤트
// 1. Mouse : click, dblclick, mousedown, mouseup, mousemove
// 2. Keyboard : leydown, keyup, keypress
// 3. Form :  Submit, change, focusin/focusout
// 4. window : laad , resize , scroll

// - 이벤트 객체
// 이벤트가 발생할 떄, 관련된 정보를 담고 있는 객체
// 이벤트 핸들러(리스너) 함수에 첫번째 인자로 자동전달된다.DOM

// button.addEventListener('click', function(evernt){
//     alert(event.target);
//     alert(event.clientX);
//     alert(event.cilentY);
// });

// target : 이벤트가 발생한 요소
// type : 발생한 이벤트 유형 
// currentTarget : 현재 처리 중인 핸들러가 할당된 요소
// clientX / clientY : 마우스의 X/Y 좌표
// pageX / pageY : 문서 전체 내에 마우스의 X/Y 좌표

// -이벤트 호출 순서
// 이벤트가 발생하고, 처리하는 과정에서 어떤 순서로 리스너가 호출되는지

// 1. 캡처링(Capturing) : 캡처링 단계에서는 이벤트가 문서의 상위에 하위로 전파한다
// 2. 버블링(Bubbling) : 버블링 단계에서는 이벤트의 하위에서 상위로 전파한다

// 일반적으로 대부분 브라우저에서는 버블링을 기본 동작으로 사용한다 
{/* <div id="out">
    <div id="in">
        <button id="btn">click</button>
    </div>
</div>

<script>

    var out = document.getElementById('out');
    var in = document.getElementById('in');
    var btn = document.getElementById('btn')

    out.addEventListener('click', function()){
        alert('out div clicked');
    }, false);

in.addEventListener('click', function()){
        alert('out div clicked');
    }, false);

    btn.addEventListener('click', function()){
        alert('out div clicked');
    }, false);
</script>

true: 캡처링
out div clivked
in div clicked
btn div clicked

false(default): 버블링
btn div clicked
in div clicked */
// out div clicked

// -  이벤트 취소 
// 이벤트가 발생한 후 해당 이벤트의 기본 동작을 중단시키거나, 이벤트 전파를 막는 것

// 1. preventDefault(): 메서드는 이벤트가 발생한 요소에서 기본 동작을 중단시킨다.
// var link = document.getElementById('aLink');

// link.addEventListener('click', function(event){
//     event.preventDefault();
// });

// 2. stopPropagation() : 해당 메서드는 현재 이벤트가 상위 요소로 전파되지 않도록 중단시킨다 
// var inner = document.getElementById('in');

// inner.addEventListener('click', function(event){
//     event.stopPropagation;
// });

// event.cancelableBubble = true;

- 윈도우 브라우저
1. window : window 객체는 창이나 탭에 대한 전역 객체, 웹 페이지 최상위 요소
2. document : 현재 문서에 대한 인터페이스, HTML 문서의 모든 요소와 내용을 접근하여 조작할 수 있다
3. navigtor : 현재 사용 중인 브라우저 및 운녕체제에 접근할 수 있다 
4. location : 현재 URL과 관련된 정보 기능을 제공한다
5. history : 브라우저 내에서 방문한 URl들의 기록(history stack )에 접근하여 조작할 수 있다

-HTTP (Hypertext Trabsfer Protocol) : 웹에서 데이터를 주고 받기 위한 프로토콜
프로토콜 : 컴퓨터에서 데이터 교환 방식을 정의하는 규칙 체계, ( 통신 프로토콜 HTTP)
클라이언트(브라우저)와 서버 간의 통신을 담당하여 요청(Response) 형식으로 이우어진다 
클라이언트가 HTTP 요청을 보내고, 서버가 해당 요청에 대한 응답을 반환한다 HTNL(문서, 이미지, 동영상 등 )

- 쿠키(COokie)
웹 서버가 클라이언트에게 정보를 저장하고 추적하기 위해 사용되는 작은 데이터 조작 
쿠키는 클라이언트의 로컬 컴퓨터 저장, 다음 요청 시 해당 정보를 함께 전송해서 상태 유지 및 개인화 기능 구현 

- 웹 스토리지(web storage)
웹 스토리지는 웹 어플리케이션에서 데이터를 임시, 영구 저장을 하기 위한 매커니즘 
웹 스토리지는 클라이언트 측에서 관리

1. localstorage : 객체를 통해 데이터 영구 저장 동일 도메인 내에서 모든 페이지 및 세션 간에 공유
2. sessionstorage : 객체를 통해 데이터 임시 저장  현재 세션에만 유지되기 떄문에 페이지가 닫히면 삭제 

- 쿠키 웹 스토리리가 다른 이유
웹 스토리지는 쿠키보다 용량 제한이 크고, API 간단하고 보안도 우수하다 
로그인 정보, 사용자 설정 

- 웹 워커 (web Worker) : 브라우저의 메인 쓰레드와 별도로 백그라운드에서 실행되는 스크립트
오래 걸리는 작업을 백그라운드에서 처리해서 메인쓰레드가 멈추거나 지연되지 않도록 

1. 백그라운드 실행 : 메인 스크립트와 별개로 백그라운드에서 실행된다 오래 걸리는 작업이 UI 업데이트를 차단하거나 반응을 저하시키지 않도록 
2. 멀티스레딩  : 자바스크립트는 기본적으로 싱글 스레드 언어다 즉 한번에 하나씩 처리하는 언어 그러나 웹 워커를 사용하여 별도의 스레드에서 코드를 실행하여
동시에 여러 작업을 할  수 있다.
3. 메시지 기반 통신  : 메인 스크립트와 웹 워커 사이의 데이터 교환은 PostMessage API와 onmessage 이벤트 핸들러를 사용한다 
4. 제한된 기능  : DOM에 직접 접근할 수 없으며, 로컬 파일 시스템에도 접근할 수 없다 (window, document)

var Worker = new Worker('worker.js');

worker.onmessage = function(event){
    console.log(event.data);
};

self.onmessage = function(event){
    console.log(event.data);
    self.PostMessage("안녕하세요 저는 다른 쓰레드입니다")
}

