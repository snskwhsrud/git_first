// 1. 동적인 웹 페이지 : HTML 요소를 선택하고 내용, 스타일, 동작 등을 동적으로 변경할 수 있다
// 사용자와 상호작용하여 다양한 이벤트에 반응하는 웹 어플리케이션 만들 수 있다.
// 2. 클라이언트 측 프로그래밍 : 클라이언트 측에서 실행되는 언어다. 사용자의 웹 브라우저에서 사용된다
// 3. 객체 지향 프로그래밍 : OOP 개념 사용하고, 객체, 메서드, 속성 등을 활용하여 작성할  수 있다
// 4. 이벤트 기반 프로그래밍 : 이벤트 기반(Event-driven) 모델을 따른다 이벤트 발생 시 해당 이벤트 대한 처리기(Event Handler) 함수를 사용
// 5. API와 상호작용: 외부 리소스와 서비스에 접근하여 사용가능하다
// 6. 다른 플랫폼에서 활용: Node.js Dart 등에서 자바스크립트를 활용하여 사용할 수 있다

// -var, let : 변수 키워드

// 1. 범위(scope): var로 선언된 변수는 함수 범위(function scope), let로 선언된 변수는 블록 범위(block scope)

// functionexam(){
//     var x = 10;
//     let y = 20;

//     if(true){
//         var x = 30; // 기존 전역변수 10을 수정
//         let y = 40; // 블록 지역변수 y를 선언

//         console.log(x); //30
//         console.log(y); // 40
//     }
//     console.log(x);
//     console.log(y);
// }

// 2. 호이스팅(HOisting) : 코드 실행 전에 변수가 선언되었다고 처리되어, 실제 변수 할당 이전에도 사용할  수 있다
// var 호이스티 발생, let 호이스팅 발생 x

// console.log(x); //Undefined
// console.log(y); // y가 없다

// var x = 10;
// let y = 20;

// console.log(x);
// console.log(y);

// 3. 재선언 (Re-declaration) : var로 동일한 변수를 여러번 선언해도 에러가 발생하지 않고 재할당된다.

// 4. 전역 객체(Global object) : 객체 단계에서 전역범위에서 생성된 var 전역변수로 해석이되고, let, const, class 등 전역변수  프로퍼티로 해석되지 않는다

// -  Array 생성
// var arr = [, , , ];
// var arr = new Array(, , ,);*
// var arr = Array(, , , );

// arr.length : 길이
// arr[i] : i인덱스 요소
// arr.pop() : 요소 제거
// arr.push(n) : 요소 추가

// - 반복문
// for, while, do-while, for-in, for-OfflineAudioCompletionEvent

// var arr = [1,2,3,4,5,6,7,8,9];

// for(let i in arr) {
//     console.log(i);
// }
// // 인덱스를 출력

// for(let i of arr){
//     console.log(i)
// }
// // 요소 하나하나 출력

// - lable문 (break, countinue)
// 코드 내에 특정 부분에 이름 짓기.
//  labelName : CSSLayerStatementRule

// for (let i=0; i<5; i++){
//     for(let j=0; j<10; j++){
//         if(j == 3) {
//             break outer;  // outer를 종료 (바깥 반복문이 종료 )
//         }
//         console.log(i+j)
//     }
// }

// -Symbol
// 원시 데이터 타입, 고유하고 변경 불가능한 데이터 값
// let a = sumbol("123");

// 1. typeof
// 2. instanceof

//-Dom( Document object Model)
//웹 페이지를 스크립트 또는 프로그래밍 언어들이 사용할 수 있는 구조로 표현하는 방법
//Dom은 트리구조의 형태로 되어 있다
//Dom은 트리구조의 형태로 되어 있다.HTML 문서의 각 요소는 DOm의 노드(node)에 해당한다

// Documet NOde: 전체 페이지를 나타낸다 트리구조 최사위 위치
// Element Node: HTML 요소를 나타낸다 (<body>,>div>,<p>)
// Text Node:  HTML 요소 내부의 문자열을 나타낸다
// Attribute Node : HTML 요소 내부의 속성을 나타낸다. (src,alt)

// ID로 요소 선택하기
//let title = document.getElementById("title");

//클래스 이름으로 요소 선택하기
//let title = document.getElementsByClassName('title')

//태그 이름으로 요소 선택하기
//let title = document.getElementsByTagName("p");

//Css 선택자로 요소 선택하기
// let highlight = document.querySelector(',highlight')
// let highlight = document.querySelectorAll('.highlight')

// //요소 내부의 텍스트 변경하기
// title.textContent = "수정한 텍스트";

// 새로운 요소를 생성하고 추가하기
// let newOne = document.createElement('p')
// newOne.textContent = "새로운 p";  //p태그를 body의 자식으로 추가한다
// document.body.appendChild(newOne); //p 태그를 body의 자식으로 추가한다
