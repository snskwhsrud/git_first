- React 
리엑트는 페이스북에서 개발된 JavaScript 라이브러리, 사용자 인터페이스(UI)를 구축하기 위해 활용한다
주요 목표는 UI를 더 간단하고, 효율적으로 구성하기 위함 컴포넌트 기반 아키텍처를 중심으로 동작하는데
컴포넌트 : UI의 작은 부분을 독립적으로 관리하는 단위, 재사용성과 모듈화를 용이하게 해준다

JSX(JavaScript XML) : 자바스크립트와 XML을 결합하여 동적인 UI 생성 
가상 DOM을 활용하여 성능 최적화, 가상 DOM, 복제해서 실제 DOm과 비교하여 필요한 부분만 업데이트한다.

장점 
컴포넌트 기반 아키텍처 : 독립적인 단위인 컴포넌트로 분리하는 디자인 패턴이다.
소프트웨어 엔지니어링 기본 원칙 : 관심사의 분리(Separation of Concerns) 를 실현 가능하게 한다

1) 함수형 (Functional) 컴포넌트 : 함수처럼 작동하여 props을 입력 받아 화면에 표시한다 
2) 클래스 (Class ) 컴포넌트: React.component 클래스를 상속받아 더 복잡한 기능을 사용할 수 있다 

단방향 데이터 흐름 : 상태(state), 속성(props)에 대한 관리가 명확, 데이터 흐름을 예측 가능하다 

DOM(Document Object MOdel) : 웹 페리지의 구조를 표현하는 인터페이스
DOM은 비용이 많이드는 직업이다 자수 발생하면 웹 어플리케이션의 성능을 저하시킨다 

리엑트는 이러한 문제를 해결하기 위해 가상 DOM(Virtual DOM) 방식을 도입했다 
가상 DOM은 실제 DOM의 복사본으로 메모리 내에 존재한다  
리액트 컴포넌트의 상태가 변경될 떄마다 새로운 가상 DOM 트리를 생성하고 이전 트리와 비교(diffing) 하여 변경사항을 파악한다
이 과정을 재조정(Reconciliation) 또는 Diffing Algorithm이라고 부른다 

변경사항만 하고 실제 DOM에 해당 변경사항만 반영하는 방식으로 작동한다 
당연히 모든 사항을 직접 반영하는 것보다 휠씬 더 빠르게 업데이트를 처리할 수 있다 

장점
1. 성능 최적화
2. 코드 단순화
3. 크로스 플랫폼 호환 

단점
가상 DOm도 사용 방법에 따라 성능 문제가 발생할 수 있다  상태 변화가 너무 자주 일어나거나 컴포넌트 구조가 복잡하면 

- 단반향 데이터 흐름 
리액트에서 데이터 흐름 '단방향 ' or '하향식'이라고 부른다 
부모 컴포넌트에서 자식 컴포넌트로만 속성(props)을 통해 데이터가 전달이 된다
자식 컴포넌트에서 직접 부모의 상태를 변경하는 것을 불가능하다 
일반적으로 콜백 함수(Callback Functional)을 사용해서 자식에게 전달하여, 자식이 함수를 호출하여 부모에게 정보를 전달할 수 있다 
다른 함수의 매개변수로 함수를 넘겨주는 실행가능한 코드 (다른 함수의 매개변수로 존재하기 위한 함수 )

NPM(Node Package Manager): NPM은 자바스크립트의 패키지 관리자 
Create React APP : 프로젝트 생성을 간소화하는 공식 CLI(command LIne Interface) 도구다 

-JSX(Javascript XML) : HTML과 굉장히 유사하다 
단순한 마크업 언어가 아니고, 동저적표현이 가능하다 중괄화({})안에 자바스크립트 표현식을 넣어서 변수나, 함수 호출을 할 수 있다
컴포넌트를 대부분 JSX로 작성한다  보통 브라우저는 JSX를 해석할 수 없다 그래서 Babel과 같은 도구를 사용해서 자바스크립트로 변환하여 전달한다
태그를 닫아야하고, Class 대신 className 이라고 써야한다 /**/

const name = "KIM";
const elemnt = <h1>Hello {name}!</h1>;

const isTrue = true;
const elemnt = <h1>{isTrue ? 'Welcome' : 'sign UP'}</h1>

function formatName(user) {
    return user.firstName + "" + user.lastNmae;
}

const user = {
    firstNAme: "KIM",
    lastName : "MMM"
};

const elemnt = <h1>Hello, {formatName(user)}</h1>;

함수형 컴포넌트 
function Welcome(props){
    return <h1>Hello, {props.name}</h1>
} 

클래스형 컴포넌트
class welcome extends React.component {
    render(){
        return <h1>Hello, {this.props.name}</h1>
    }
}

<welcome name = "KIM"/>

const elemet = <h1>Hello, world!</h1>;

Babel

const element = React.createElement("h1", "null", "hello" ,"world"a)


- render : 컴포넌트의 출력을 정의하는 역할 
함수형 컴포넌트 : 함수 자체가 렌더링 로직을 담당, JSX를 반환해야한다 
클래스형 컴포넌트 : 컴포넌트가 어떻게 보여질지 정의한다 JSX를 반환해야한다

render 메소드와 같은 컴포넌트 내부에서 반환되는 JSX 요소를 React 엘리먼트라고 한다 
화면에 어떤 것이 보여질지 나타내며, 실제 DOM과는 연결되지 않는다 

- 함수형 컴포넌트 : 리액트의 훅(Hooks) 기능이 도입되기 전에는 라이프사이클, 상태 관리 등을 할 수가 없었다 
- 클래스형 컴포넌트 : 처음 도입될 떄부터 있었으며, render를 통해 JSX를 반환하고, this.state, this.setstate 등을 통해 내부 상태를
관리하고, 라이프사이클 메서들 통해 화면에 나타나거나 사라지는 시점에 특정 직업을 수행할 수 있다 

1) 상태(state) : 상태는 컴포넌트 내부에서 선언되고, 컴포넌트 동작에 필요한 데이터를 저장한다 상태값이 변경되고 변경될 떄 
사용자와 상호작용이나 데이터 업데이트 상태가 변경되면 React는 상태를 감지하여 컴포넌트를 랜더링한다
클래스형 : this.state로 상태를 정의하고 this.setState() 상태를 업데이트 한다
함수형 : usestate라는 훅을 사용하여 상태를 관리한다 UseState 초기값을 받아서 현재 상태와 해당 상태를 업데이트 하는 함수 두가지를 반환해야한다

2) 속성(Props) : 부모 컴포넌트로부터 자식 컴포넌트로 데이터가 전달될 떄 사용된다 속성은 읽기 전용으로 한 번 전달받으면 그 값을 바꿀 수 없다
컴포넌트 간의 통신 

function child(props){
    return<div>{props.message}</div>;
}

function parent(){
    return <child message = "Hello frin Parent"/>
}

-컴포넌트의 구조화와 계층 구조 컴포지션(Composition)
컴포지션은 더 큰 단위의 컴포넌트를 작은 단위 컴포넌트로 분해하는 방법을 말한다 

function APP() {
    return ( 
        <div>
        <Header/>
        <Body>
        <Article/>
        <Sidevar/>
        </Body>
        <Footer/>
        </div>
    )
}

1. 데이터 전달 : 부모가 자식한테 데이터를 전달하기 위해 props을 사용한다 
2. 데이터 접근 : 자식은 전달받은 Props를 통해 데이터에 접근. Key 값을 통해 원하는 데이터에 접근할 수 있다 
3. 읽기전용 : 리액트 중요한 원칙 'props are read-only',  수정 불가능하다 
4. 다양한 타입의 데이터 전달 가능

- var, let , const
var : 함수 범위
let : 블록 범위
const : 상수 

- 라이프사이클 메소드 (컴포넌트 생명주기 관련 메서드)
이러한 메서드들은 특정 시점에 자동으로 호출된다 

1) componentDidMount : 컴포넌트가 처음 DOM에 마운트된 직후에 호출된다 여기에 API 호출과 같은 비동기 작업을 수행한다 
 
2) componentDidupadte : 컴포넌트가 업데이트된 직후에 호출된다 초기 랜더링에서 호출되지 않는다 업데이트 변경사항, 요청 등을
처리하는데 사용한다  

3) componentWillUnmount : 컴포넌트가 DOM에서 제거되기 직전에 호출된다 타이머 해제, 구독 해제 등의 정리 작업을 하는데 사용된다 

4) useEffect : React Hooks 도입되었을때, 함수형 컴포넌트에서 사용할 수 있도록 side-effect(부수효과)를 함수형 컴포넌트 내에서 
실행할 수 있게 만든다 

import React, {useState, useEffect} from 'react'; 

fuctuon Example(){
    const [count, setCount] = useState(0);

    useEffect(() => {
     document.title = '${count }번 클릭하였습니다.';

     return()=> {

     };
}, [count]);

rrturn ( 
    <div>
    <p>{count} 번 클릭하였습니다<p>
    <byttin onclick={()=> setcount(count+1)}
    click
    </button>
    </div>
);
}

useEffect 랜더링 후에 실행되며 count 값이 변경될 떄마다 실행된다 또한 clean-up 함수를 반환하여 컴포넌트가 언마운트되거나
재렌더링되기 전에 정리 작업을 할 수 있다
따라서, useEffect는 componentDidMount, componentDidupadte , componentWillUnmount 세 가지 모두 합친 것과 같은 역활을 할 수 있다 

- 이벤트 처리 : 이벤트 핸들러를 JSX요소에 등록하여 사용한다 

클래스형 컴포넌트에서 이벤트 처리 : 메소드를 통해 이벤트 핸들러를 정의하고, JSX 요소에 연결된다 
this 키워드를 사용하려묜 생성자 내부나 메서드 선언시 바인딩 해야한다

class EXample extends React.component {
    construcror (props){
        super(props)
        this.state = {count:0};

        this.handleclick = this.handelclick.bind(this);
    }

    handleclick(){
        this.setState({count: this.state.count + 1 });
    }

    render(){
        return (
            <button onclick={this.handleclick}>
            {this.state.count} 번
            </button>
        )
    }
}

함수형 컴포넌트에서 이벤트 처리 : 함수형 컴포넌트에서는 보통 화살표 함수로 이벤트 핸들러를 정의한다 
import React, {useState} from 'reaact';

function Example(){
    const[count, setCount] = useState(0);

    const handleclick = () => setCount(count+1);

    return ( 
        <button onclikc -{ handleclick}>
        {count} 번
        </button> 
    )
}

화살표 함수(arrow function) : Es6에 도입된 선언 방식 

매개변수 없는 함수 

count func1 => () {
    함수내용
};

const func1 = param => {
    함수내용
};

const func1 = (param1, param2,) => {
    함수 내용
};

반환값이 있는 경우
const func1 = () => expression;

const func1 = () => {
    함수내용
    return expression;
}

{ } 없이도 함수 선언 가능, this 키워드 없이 주변 스코프에서 this 값을 상속받는다 화살표 함수 내부에서 다른 화살표 함수를 작성할 수 있다 

클래스형 컴포넌트를 사용해서 증가, 감소하는 카운트 만들기 

- 조건부 랜더링 : JSX 내에서  Javascript 표현식을 사용하여 조건부 로직을 작성할 수 있다 

1) if /else 
fuction Example({number}) {
    if(number > 10) {
        return <div>10보다 큰 값 <.div>;
    }else {
        reaact <div> 10 보다 작은 값 </div>;
    }

    switch(number) { 
        case 1 : 
        return <div>1</div>;
        case 2 :
        return <div> 2 </div>;
        case 3 :
        return <div> 다른 값</div>;
    }
}

2) 삼항연산자 
fuction Example({number}) {
    fuction Example({number}) {
        return(
            <div>{number>10 ? '10보다 큰 값' : '10보다 작은 값 '}</div>  
        );
    }
3. &&연산자를 활용한 랜더링 
fuction Example({message}) {
    return(
        <div>
        {message.length > 0 && <h2>Hell0, {message} </h2>}
        </div>
    );
}

- 리스트와 key 
const number = [1,2,3,4,5,6];
여러 개의 동일한 형태의 컴포넌트를 랜더링해야할 떄, 배열의 각 요소에 대해 하나씩 컴포넌트를 생성하고 싶을 때,
이런 경우 map 메소드를 사용하여 각 요소별로 컴포넌트를 하나씩 생성한다. 단, 고유한 key값을 부여해야한다 

const list = number.map((number) =>
    <li>{number}</li>
);

const list = number.map((number) =>
    <li key ={key.toString()}>{number}</li>
);
키 값이 중복될 수 있다 보통 데이터 ID를 key 사용하는데 최후의 수단으로 인덱스 번호를 사용하기도 한다 
배열의 순서가 바뀔 경우 key의 업데이트를 해야되기 때문에 비효율적이다 최대한 인덱스 번호를 키 값으로 쓰는 것은 피하자 
key 값은 전역적으로 고유할 필요는 없다 형제 사이에서만 고유하면 된다

- 폼 처리 : 폼 요소의 상태를 관리하고 사용자 입력에 따라 반응하는 방법 
일반적으로 onChange 이벤트 핸들러 통해 사용자의 입력을 상태에 연결한다 onSubit 이벤트 핸들러를 통해 폼 제출 시 실행할 작업을 정의한다
일반적으로 폼 처리는 이벤트 핸들러랑 상태로 한다

1)클래스 컴포넌트에서 폼 처리 
class NameForm extends COmponent {
    constrructor (props) {
        super(props);
        this.state = {value : ''}

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
        this.setState({value : event.target.value}); // event.target.value는 이벤트가 발생한 요소(target)인 입력 필드를 사용
    }

    handleSubmit(event) {
        alert('A name submit: ' + this.state.value);
        event.preventDefaulr(); // 기본동작을 취소하는 역활 
        // 폼을 제출하면 기본적으로 페이지가 다시 로드 or 새로고침 
    }

    render(){
        return(
            <form onSubmit={this.handleSubmit}>
            <label>Name:
                <input type = "text" value={this.state.value} onChange={this.handleChange}/>
            </label>
            <input type="submit" value="submit"/>
        </form>
        )
    }
}

2) 함수형 컴포넌트에서의  폼 처리: Hooks
useState Hook, onChange, onSubit

import React, {useState} from  'react';

fuction NameForm(){
    const [value, setValue] = useState('');

    const handleChange = (event) => setValue(Ecent.target.value) ;

    const handleSubmit = (event) => {
        alert('A name submit: ' + value);
        event.preventDefaulr();
    };

    return (
        <form onSubmit = {handleSubmit}>
        <label>Name:
        <input type="text" value={value} onChange={handleChange} />
        </label>
        <input type-'submit' value='submit'/>
        </form>
    );
}

자바스크립트 모듈 시스템에서 export와 import는 모듈 간에 기능을 공유하기 위해 사용되는 키워드다

-export : 현재 모듈에서 정의된 함수, 객체, 값 등을 다른 자바스크립트 파일에서 사용할 수 있도록 공개합나디

- import : 다른 자바스크립트 파일에서 export된 기능을 가져오기 위해 사용한다 

- export default : 모듈당 하나만 가능한 기본 내보내기, default로 내보낸 값은 {} 없이 import할 수 있다

- 아이템 추가 : 아이템을 추가하기 위해서는 기존 배열을 변경하는 것이 아니라, 새로운 배열 생성하고, 이를 state로 관리해야한다

const [item, setItems] = useState (['Apple', 'banana' , 'kiwi']);

const addItem = () => {
    const newItem = prompt('Enter a new item:');
    if(newItem){
        setItems([...items, mewItem]);
    }
};

const removeItem = (index) => {
    const updateItem = items.filter((_,i) => i !== index);
    setItems(updateItem);
};

1. 사용자 로그인의 상태에 따라 다른 메시지를 보여주는 컴포넌트를 작성하세요 로그인이 되어 있다면 환영합니다 00님 아니면 로그인해주세요
2. 배열에 있는 데이터로 리스트 아이템을 생성하는 컴포넌트를 작성하세요 [{id: 1, text:"hello"}, {id:2, text:"byebye"}]
3. 아까 만든 로또 6개 중복없이 만들기 && 사용자 입력으로 6개 


- 바인딩(Binding) : 자바스크립트에서 함수나 메서드와 객체를 연결하는 과정 
바인딩을 통해 함수가 특정 객체의 메서드를 동작하도록 할 수 있다 

1. 명시적 바인딩(Explicit Binding): bind(), call(), apply() 메서드를 사용하여 함수에 직접 인자로 전달된 객체와 연결 
fuction hello(){
    console.log('Hello, ${this.name}');
} 

const person = {
    name: "kim",
};

sayhello.bind(person);

2. 암시적 바인딩(IMplicit Binding) : 메서드 호출 시 앞에 위치한 객체와 연결된다 
const person = {
    name: "KIM";
    hello(){
        console.log("Heloo, ${this.name}");
    },
};

3. 생성자 함수 바인딩(comstructor Binding) : new 키워드를 사용하여 생성자 함수와 객체을 연결 
function Person(name) {
    this.name = name;
    this.sayhello = function (){
        console.log("Heloo, ${this.name}");
    };
}

const Kim = new Person("Kim");
Kim.sayhello();

4. 화살표 함수 바인딩(Arrow Fyction Binding) : 주변 스코프의 this 값을 상속받는다
const person = {
    name 'Kim',
    sayhello: () => {
        console.log('Hellp ${this.name}');
    },
};

- 생명주기 

1) 마운팅 (Mounting)
컴포넌트 인스턴스 생성되서 DOM에 삽입될 때 메소드들이 차례로 실행된다 
+ constrructor(): 컴포넌트가 마운트되기 전에 호출된다 초기 state를 정의 설정할 수 있다 
+ static getDerivedStaterFromProps() : props을 받아 state를 업데이트할 떄 사용된다
+ render() : 컴포넌트 UI를 렌더링한다 
+ componentDidMount(): 컴포넌트가 마운트된 직후(DOM에 삽입된 직후)

2) 업데이팅 (Updatiog)
props나 state가 변경되면 업데이팅이 발생하고 메소드들이 차례로 실행된다 
+ static getDerivedStaterFromProps()
+ shouldComponentUpdate() : props나 state를 변경 시 리랜더링 전에 호출된다
+ render()
+ gerSnapshotBeforeUpdate(): render의 결과가 DOM에 반영되기 직전에 호출된다
+ componentDIdUpate(): 업데이트 직후에 실행된다 이전 props와 state를 호출된다

3) 언마운팅 (Unmountiog)
컴포넌트가 DOM에서 제거 될 떄, 메소드가 실행된다
+componentwillUnmount()

- Fragment 
React에서 여러 요소를 감싸주기 위해 사용되는 특별한 컴포넌트 
Fragment를 사용하면 추가적인 DOM노드를 생성하지 않고도 여러 요소를 그룹화할 수 있다 
일반적으로 JSX 코드에서 컴포넌트가 하나의 최상위 요소만이 존재해야 한다 그래서 불필요하게 <div> 또는 다른 요소를 선언한다
이러한 상황에서 Fragment를 사용해서 요소들을 그룹화한다
Fragment는 아무런 출력을 하지 않고, 자식 요소들을 그룹화하는 역할만 수행한다
Fragment는 <> 열고 , </>닫는다 혹은 <React.Fragment> </React.Fragment>로 작성할 수 있다

class Example extends Component {
    render(){
        return(
            <>
                <>
                    <p>안녕하세요</p>
                    <button>눌러주세요</button>
            </>
            <>
            <p>안녕히 가세요<p>
            <button>누르지마세요</button>
            </>
        </>

        )
    }
}

- Context ApI 
React 내장 기능, 복잡한 어플리케이션에서 여러 컴포넌트 간의 상태를 공유하기 위해 사용한다
전역적으로 데이터를 공유할 수 있게 해주는 기능이다 주로 어플리케이션 전체나 일부 컴포넌트 트리에서 공유해야하는 데이터에 사용된다
Context API 사용하면 중간 단계의 컴포넌트들을 거치지 않고 트리 아래의 모든 컴포넌트 들이 값을 공유할 수 있다

const MyContext = React.createContext(defaultValue);

Provider 컴포넌트를 사용하여 하위 컴포넌트들에게 현재의 text값을 전달한다
<MYContext.Provider value={}>

하위 컴포넌트에서는 MyContext.consumer를 사용하여 context 값을 소비하거나, useContext() Hook을 사용하여 함수형 컴포넌트 내에서 직접 접근할 수 있다

- Redux (상태 관리 라이브러리)
어플리게이션의 상태를 저장하는 중앙 집중식 저장소(store) 개념을 제공하며, 상태 변경은 action, reducer 등을 통해 관리한다 
react-redux 별도의 라이브러리가 함께 자주 사용되며, Redux store 컴포넌트 사이의 연결을 돕는다
단, Redux는 큰 규모와 복잡한 상태 관리가 필요한 프로젝트에서 주로 사용된다.

-  Hooks :  React 함수형 컴포넌트에서 상태(state) 와 생명주기를 사용할 수 있게 해주는 기능 

클래스 컴포넌트 -> 함수형 컴포넌트

1. useState Hook  
상태(state)를 함수형 컴포넌트에서 관리할 수 있게 해준다 
일반적으로 배열 형태로 반환되며 첫번쨰 값이 상태 값, 두번째 값이 상태 값을 업데이트해주는 함수
import React, {usestate} from 'react';

function Example(){
    const [num,setNum] = useState(1);

    const click = () => {
        setNum(num+1);
    };

    return(
        <p>값 : {num}</p>
        <button onclick={click}>증가</button>
    )
}

2. useEffect Hook
생명주기 메서드(componentDidMount, componentDidupadte, componentWillUnmount) 과 비슷한 역할을 한다
특정 작업, 상태 변화를 진행함에 있어 부작용(side effect)을 처리하는데 사용한다
side effect는 데이터 가져오기 수동적인 DOM 조작 등과 같이 다른 컴포넌트 영향을 줄 수 있는 작업들

import React, {usestate, useEffect} from 'react';

function Example (){
    const [num,setNum] = useState(1);

    const click = () => {
        setNum(num+1)
    };

    useEffect(() => {
        document.title = '값 : ${num}';

        return () => {
            document.title = 'Reaact App';
        }
    }, [num]);

    // 첫번째 인자는 side effect를 수행하는 함수 
    // 첫번쨰 인자는 함수 내부에서 문서 제묵 변경한다
    // 두번쨰 인자는 dependency array 
    // 두번째 인자는 배열이 변할 떄, 첫번쨰로 전달된 side effect 함수가 실행된다.  

    // cleanup function (반환하는 함수 )
    //컴포넌트 unmount 시 dependency가 변경되기 전에 여기서 필요한 작업을 할 수 있다 
    return(
        <p> 값 : {num} </p>
        <button onclick={click}>증가 </button>
    )
}

- useContext Hook 
Context ApI를 함수형 컴포넌트에서 사용할 수 있도록 도와준다 
전역적인 상태를 관리하거나 깊은 중첩에 걸친 컴포넌트들에게 props를 전달하는 것을 피하기 위해 사용된다 
useContext Hook을 사용하면 context 객체를 인자로 받아 해당 context의  값을 반환해야한다
이 값은 context Provider 컴포넌트에서 제공되며, Provider가 없다면 context 객체 생성 시 전달된 기본값이 된다 
import React, {useContext} from 'react';

const MyContext = React.createContext();

function MyContext(){
    const value = useContext(MyContext);

    return <p>{value} </p>;
}

function Example(){
    return(
        <MyContext.Provider value - "Hello">
        <MyComponent/>
        </MyContext.Provider>
    )
}

+ Provider 
Context ApI에서 중요한 역할을 하는 컴포넌트
Provider는 context를 생성할 때 반환되는 컴포넌트로, 그 자식 컴포넌트들에게 context 값을 제공한다

- useReducer Hook 
복잡한 상태 로직을 다루기 위해 사용된다 useState보다 더 강력한 방식으로 작동하며 액션(action)과 리듀서(reducer) 패턴을 사용한다
현재 상태와 함수를 쌍으로 제공한다 함수는 action을 인자로 받아 reducer한테 전달하고, reducer는 현재 상태와 action을 기반으로 새로운 상태를 생성한다

import React, {useReducer} from 'react';

const reducer = (state, action) => {
    switch (action.type) {
        case 'increment';
            return {count: state.count};
        case 'decrement':
            return {count:start.count};
        default :
            return {count: state.count};
    }
}

fuction Example(){
    const [state, dispatch] = useReducer(reducer, {count:0});

    return (
        <>
        <p>Count: {state.count}</p>
        <button onclick={() => dispatch({type: 'increment'})}>+</button> 
        <button onclick={() => dispatch({type: 'decrement'})}>+</button>
        </>
    );
}