1) 웹 어플리케이션 개념 

- 클라이언트 - 서버 모델 
클라이언트는 사용자가 직접 사용하는 컴퓨터나 장치, 서버는 네트워크를 통해 클라이언트에게 서비스를 제공하는 컴퓨터 시스템
클라이언트는 서버에 요청(Request)를 보내고, 서버는 그 요청에 대한 응답(Response)를 반환한다

- HTTP 프로토콜(Hypertext Transfer Protocol)
웹 어플리케이션에서 데이터를 주고받기 위한 통신 규약
요청과 응답을 메시지 형태의 데이터로 전송한다


- 요청/응답 매커니즘
메세지에는 요청방식(GET, POST등), 경로(URL), 헤더(Header), 본문(Body) 등의 정보가 포함된다
응답 메세지에는 상태코드(200 OK, 404 Not Found 등), 헤더, 본문 등의 정보가 포함된다

-서블릿(Servlet) : Java를 사용하여 웹페이지를 동적으로 생성하는 서버 측의 프로그램
Servlet API를 사용하면 개발자는 요청에 따라 웹 페이지를 동적으로 생성하고, 데이터 베이스와 상호작용하고, 네트워크 서비스를 처리할 수 있다

- 정의 : 서블릿은 자바 클래스다  HTTP 요청을 받아 처리하고 HTTP 응답을 생성하는 역할을 한다

- 요청 처리 : 클라이언틑에서 보내는 HTTP 요청 메서드(GET, POST 등) 을 받아들여 해당 요청에 대한 로직을 처리한다
- 응답 생성 : 로직 실행 결과에 따라 응답 데이터를 만들어 클라이언트에게 반환한다 (HTML or JSON)
- 세션 관리 : HTTP는 상태 정보를 유지하지 않는 Stateless 프로토콜이다 서블릿도 세션(Session) 객체를 활용하여 상태정보 유지가 가능하다
- 서블릿 컨테이너 : 서블릿은 서블릿 컨테이너 혹은 웹 컨테이너라고 불리는 컴포넌트 내에서 실행된다
이 컨테이너가 서블릿의 생명주기 관리(init(), service(), destroy() 메서드), 멀티스레딩 지원 등의 기능을 담당한다

2) 서블릿의 생명주기 (Lifecycle ) : 서블릿이 생성되고, 요청을 처리하고, 마지막으로 소멸하는 과정을 의미한다

- init() : 서블릿이 최초로 생성될 때 한 번만 호출되는 메서드 
이 메서드는 보통 초기화 로직을 포함하며, 서블릿 컨테이너가 클라이언트로부터 첫 요청을 받았을 때 호출된다
만약 서블릿에 설정된 로딩 시점이 서버 시작 시점인 경우 웹 어플리케이션 배포 이휴 초기화 과정에서 호출될 수 있다 

- service() : 클라이언트의 모든 요청에 대해 호출되는 메서드
이 메서드 안에서 HTTP 요청 방식(GET, POST 등 )에 따라 적절한 메서드(doGet(), doPost() 등)을 호출하여 실제 로직을 처리한다

- destroy():  서블릿 인스턴스가 소멸되기 전에 한 번만 호출되는 메소드
이 메서드 안에서 리소스 해체, 정리 작업같은 종료 작업들을 처리한다

예시 : 처음 클라이언트의 요청으로 해당 서블릿 클래스가 필요할 때, 컨테이너는 해당 클래스를 로딩하여 인스턴화하고 init()메서드를
실행시켜 초기화 작업을 진행 -> 클라이언트의 모든 요청마다 service() [doGet(), doPost, doPut(), doDelete()]
와 같은 HTTP method-specific 함수들이 실행된다 -> 웹 어플리케이션이 종료되거나 리로딩되거나 해당 클래스가 더 이상 필요하지 않을 경우
destroy() 함수가 실행되어 종료작업을 처리한다

3) 요청과 응답 처리 
클라이언트로부터 들어오는 요청을 어떻게 처리하고 결과를 반환하는지에 대한 과정을 보여준다

- HTTPServletRequest : 클라이언트의 요청 정보를 담고 있는 객체 
이  객체를 통해  HTTP 메소드(GET, POST 등 ), URL, 헤더 , 본문, 쿼리 스트링, 쿠키 등 다양한 요청 정보에 접근할 수 있다
세션 관리 기능도 제공한다

- HTTPServletResponse : 클라이언트에게 보낼 응답을 담는 객체
개발자는 해당 객체에 상태코드, 헤더, 본문, 쿠키 설정 등을 넣을 수 있다
출력 스트림을 사용하여 동적인 HTML 페이지나 JSON 데이터 등 응답 본문을 작성할 수 있다

과정 
1. 클라이언트가 HTTP 요청을 보낸다
2. 서블릿 컨테이너가 해당 요청을 받아 적절한 서블릿에 전달한다
3. 서블릿 컨테이너는 HttpServletRequest, HttpServletResponse 객체를 생성하고, 해당 서블릿의 service( ) 등의 메소드 인자로 전달한다
4. 개발자가 구현한 로직 내에서 HttpServletRequest 객체로부터 필요한 데이터를 추출하여 비즈니스 로직을 수행한다
5. 비즈니스 로직의 결과값 혹은 반환 페이지 정보 등으로 HttpServletResponse 객체를 설정하거나 직접 출력스트림으로 반환값을 내보낸다
6. service( ) 메소드 등의 호출이 종료되면 HttpservletResponse 객체ㅔ가 가진 정보로 HTTP 응답메세지를 만들어 클라이언트에게 전송한다

4) 세션 관리
1. 클라이언트가 처음 요청을 보낼 때 서버는 HttpSession 객체를 생성하고 고유한 세션 ID를 부여한다
2. 서버는 응답할 때 이 세션 ID를 쿠키가 URL 리라이팅 등의 방식으로 클라이언트에게 전송한다
3. 클라이언트 다시 요청을 보낼 때마다 해당 세션 ID가 함께 전송되어 해당 ID로 Httpsessin 객체를 찾아 사용자 정보에 접근할 수 있다
4. 필요에 따라 개발자는 HTTPSession 객체에 속성(Attribute)을 추가하거나 제거하여 필요한 데이터를 저장하거나 조회할 수 있다

장단점

장점
1. 효율성 : 한 번 로딩된 이후에는 메모리에 계속 유지되므로 각 요청마다 새로운 프로세스나 스레드를 생성하지 않아도 된다
따라서, CGI(Common Gateway Interface) 등의 기술보다 처리속도가 빠르고 자원 사용량이 적다
2. 편리함 : Java를 사용하여 개발하므로 객체 지향적 코드 작성이 가능하며 재사용가능한 클래스 라이브러리를 활용할 수 있다
3. 보안 : 자바 언어의 보안 관련 기능들과 웹 컨테이너에서 제공하는 인증 및 권한 관리 기능들을 활용할 수 있다
4. 표준화 : 자바 EE(Enterprose Edition) 스펙의 일부로 정의되어 있어 다양한 웹 컨테이너에서 호환될 수 있다

단점
1. 상태관리 : HTTP 프로토콜은 Stateless 특성 때문에 상태정보 유지를 위해서는 추가적인 작업이 필요하다
2. 비즈니스 로직과 프레젠테이션 로직의 혼합 : 서블릿 코드 내에서 HTML을 직접 작성하는 경우 비즈니스 로직과 프레젠테이션 로직이
혼합되어 코드 가독성과 유지 보수성이 떨어질 수 있다 이러한 문제는 JSP(JavaServer Pages) 등의 기술로 해결한다
3. 개발 및 배포 복잡성 : 이러한 문제는 스프링 부트(Spring Boot) 와 같은 프레임워크를 사용하여 간소화할 수 있다

5) 서블릿 클래스 구조
서블릿 클래스는 주로 javaX.servlet.servlet 인터페이스를 구현하거나,
javax.servlet.http.Httpservlet 클래스를 상속하여 작성한다

1. 패키지 밒 임포트 : 서블릿 클래스에 적절한 패키지를 추가해야한다
javax.servlet 패키지와 javax.servlet.http 패키지를 임포트해야한다
2. 클래스 선언 : 서블릿 클래스는 일반적으로 Httpservlet을 상속한다
public class NewServlet ectends HttpServlet {}
3. 생명주기 메서드 : init(), service(), destroy() 등을 오버라이딩하여 구현한다
4. HTTP 요청 처리 : HTTP 요청에 따라 적절한 메서드 (doGet(), doPost() 등)을 오버라이딩하여 구현한다
5. 응답 생성 : HttpServletResponse 객체를 사용하여 응답 데이터, 상태 코드 해더 정보 혹은 출력 스트림으로 동적 컨텐츠를 작성한다
6. 추가적으로 세션관리(HttpSession), 쿠키 사용(Cookie) 등과 같은 기능을 사용할 수 있다

import javax.servlet.http.HttpServlet;
import javax.servlet.hhttp.HttpServletRequest;
import javax.servlet.http.http.HttpServletResponse;
import java.io.IOException;

public class NewServlet extends HttpServlet {
    @Override
    public void init(){
        //초기화 작업
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpservletResponse response) throws IOException{
        String name = request.getParameter("name");
        response.setContentType("text/html")'
        response.getWriter().println("<h1>Hello, " + name + "</h1>");

    }

    @Override
    Protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException{
        String username = request.get{arameter("username");
        String password = request.getParameter("password");
        
        if(isValiduser(username, password)){
            response.setStatus(HttpServlerTesponse.se_OK);
            response.getWriter().println("로그인 성공");
        }elss{
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().println("로그인 실패);
        }
    }

    private boolean isValiduser(String username, String password){
        return username/equals("admin") && password.equals("password")'
    }

    @Override
    public void destroy(){
        //종료작업 
    }
}

- HttpServketRequest 

getRequestURI() / getRequestURL : 클라이언트가 요청한 URL, URI 을 반환한다
getMehod() : HTTP 요청 메소드를 문자열로 반환한다
getparameter(String name) : 요청 파라미터 중 지정한 이름의 값을 반환한다
getOarameterValues(String name ) : 동일한 이름을 가진 모든 요청 파라미터의 값을 문자열 배열로 반환한다
getParameterNames() / getparameterMap() : 모든 요청 파라미터의 이름들을 Enum형태 혹은 Map 형태로 반환한다
getHeader(String name) : 지정한 이름의 HTTP 헤더 값을 문자열로 반환한다
getHeraders(String name) : / getHeaderNames() : 지정한 이름의 모든 HTTP 헤더 값들/ 모든 헤더 이름들을 열거형으로 반환
getCookies () : 요청에 포함된 모든 쿠키 객체를 배열로 반환한다
getSession (boolean create) : 현재 세션 객체(HttpSession) 을 가져온다 인자값이 없으면 새로 생성할지 결정할 수 있다

package com.example.demo;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import java.io.IOException;

public class Requestservlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("Request URI: " + request.getRequestURL());
        System.out.println("Request Method: " + request.getMethod());

        for (String paramName : request.getParameterMap().keySet()) {
            String[] paramValues = request.getParameterValues(paramName);
            for (String value : paramValues) {
                System.out.println("Name: " + paramName + ", Value: " + value);
            }
        }

        java.util.Enumeration<String> headerNames = request.getHeaderNames();

        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            System.out.println("Header Name: " + headerName + ", Value: " + request.getHeader(headerName));
        }

        Cookie[] cookies = request.getCookies();

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                System.out.println("Cookie Name: " + cookie.getName() + ", Value: " + cookie.getValue());
            }
        }
    }
}

- HttpServletResponse

SetStatus(int sc) : HTTP 응답 상태를 설정한다
sendError(int sc, String msg) : 에러코드와 에러메세지를 클라이언트에게 전송한다
setContentType(String Type) : 응답의 컨텐츠 타입을 설정한다 HTML 문서로 반환하는 경우 : text/html
JSON 데이터를 반환하는 경우 : application.json
SetHeader(String name, String value) / addHeader(String name, String value)
HTTP 헤더의 이름과 값을 추가한다 setHeader : 덮어쓰기, addHeader : 새 값을 추가
getWriter() / getOutputStream() : 클라이언트에게 전송될 응답 본문을 작성하기 위한 출력 스트림을 반환한다
addCookie(Cookie cookie) : 새로운 쿠키 객체(javax.servlet.http.Cookie)를 응답에 추가한다
sendRedirect(String location) : 클라이언트에게 지정된 URL로 리다이렉션하도록 지시하는 302 상태코드와 location 헤더 값을 설정하여 전송한다


 